;;;
"title": "Managing Ttls On Azure&nbsp;Cdn",
"seo_title": "Managing Ttls On Azure Cdn",
"date": "2017-04-13 18:24:09 UTC",
"abstract": [
  "",
  ""
]
;;;

<article>
  <h2 class="subtitle u-left-indent-2">4.Cache Control</h2>
  <p>To set the cache control headers of files in the CDN, we will make use of a PowerShell script. As a prerequisite, open up PowerShell and <a href="https://docs.microsoft.com/en-us/powershell/azure/install-azurerm-ps">install Azure PowerShell</a>.</p>
  <p>Next, we will check if PowerShell is configured to run scripts.</p>
  <ol>
    <li>
      <p>The first method we can use is changing the execution policy. Enter following command:</p>
<pre class="code-block"><code><span class="prompt">PS C:\> </span>Get-ExecutionPolicy</code></pre>
  <p>If the output is anything other that <code>Unrestricted</code> run the following command:</p>
<pre class="code-block"><code><span class="prompt">PS C:\> </span>Set-ExecutionPolicy Unrestricted</code></pre>
    </li>
    <li>
      <p>Alternatively, we can change the permissions of the file in which our script is stored. To do this, type:</p>
<pre class="code-block"><code><span class="prompt">PS C:\> </span>Unblock-File -Path "path\to\script.ps1"</code></pre>
    </li>
  </ol>
  <p>There are 2 versions of the script. The first one requires you to enter the email and password for your Azure account every time you wish to run it. Additionally, you will need the storage account key to get access to the files stored on the CDN.</p>
  <p>The second version automates the login process by creating an application that is associated with your Azure account.</p>

  <hr>
  <h3>Script (Manual Login)</h3>
  <p><a href="https://gist.github.com/Croccifixio/3b1ddb46d0af9406fae83d0d08d1a2a0">View the script</a></p>
  <p>You can download the script from the provided link or copy its contents to a local <code>.ps1</code> file. In Powershell, navigate to the directory in which the script file resides and to run it, type in the script name with the <code>.\</code> prefix.</p>
  <figure>
    <img src="<%= image_path('blog/manual-login.png') %>" alt="Running the manual login script">
    <figcaption>Running the manual login script</figcaption>
  </figure>
  <p>After a few seconds, a window should pop up allowing you to log in to your Azure account.</p>
  <p>As the script progresses, it will eventually prompt you to enter a storage account key, which can be found on the Azure portal by opening up the storage account and clicking on <span class="ui-flow">Access Keys</span>. Select one of the existing keys and paste it into the PowerShell terminal.</p>
  <figure>
    <img src="<%= image_path('blog/storage-account-key.png') %>" alt="Accesssing storage account keys in Azure Portal">
    <figcaption>Finding the storage account key</figcaption>
  </figure>

  <hr>
  <h3>Script (Automated Login)</h3>
  <p><a href="https://gist.github.com/Croccifixio/536e372178af4b23707857aa3d7baa81">View the script</a></p>
  <p>To set up the automated login, start by creating an Azure AD application. The process it outlined in this <a href="https://gist.github.com/Croccifixio/cc2a1be51cfe08f3b71fe36d408b6313">gist</a>. A more detailed explanation can be obtained from <a href="https://cmatskas.com/automate-login-for-azure-powershell-scripts/">Chrisopher Matskas' guide</a> on the matter.</p>

  <p>Now, we will replace the placeholders in the script with the login credentials needed to authenticate it. The first three &ndash; <b>&lt;application_ID&gt;</b>, <b>&lt;applicaion_password&gt;</b>, and <b>&lt;tenant_ID&gt;</b> &ndash; can be found by running the PowerShell commands linked to in the previous paragraph. The fourth one &ndash; <b>&lt;connection_string&gt;</b> &ndash; can be found in the Azure portal by opening up the storage account and clicking on <span class="ui-flow">Access Keys</span>. Use one of the existing connection strings or create a new one.</p>
  <figure>
    <img src="<%= image_path('blog/connection-string.png') %>" alt="Accesssing storage account connection strings in Azure Portal">
    <figcaption>Finding the connection string</figcaption>
  </figure>
  <p>The first 5 lines of the script are shown below. After replacing the placeholders in lines 2-5 with the appropriate credentials, the script is ready to </p>
<pre class="code-block"><code><span class="code-comment"># Login credentials (Replace the 4 placeholders "<...>" with the appropriate strings)</span>
$ApplicationID = "<span class="code-emphasis">&lt;application_ID&gt;</span>"
$ApplicationPassword = ConvertTo-SecureString "<span class="code-emphasis">&lt;applicaion_password&gt;</span>" -AsPlainText -Force
$TenantID = "<span class="code-emphasis">&lt;tenant_ID&gt;</span>"
$ConnectionString = "<span class="code-emphasis">&lt;connection_string&gt;</span>"</span>
</code></pre>

  <h2 class="subtitle">Sources:</h2>
  <ul class="u-list">
    <li><a href="https://docs.microsoft.com/en-us/azure/cdn/cdn-manage-expiration-of-blob-content">Manage expiration of Azure Storage blobs in Azure CDN</a></li>
    <li><a href="https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.security/set-executionpolicy">Set-ExecutionPolicy</a></li>
    <li><a href="https://cmatskas.com/automate-login-for-azure-powershell-scripts/">Automate login for Azure Powershell scripts</a></li>
  </ul>
</article>